#pragma once

/****************************************************************
 * Include
 ****************************************************************/
#include <d3d12.h>
#include <cstdint>
#include "ComPtr.h"
#include "SimpleMath.h"


/****************************************************************
 * namespace SimpleMath
 ****************************************************************/
using namespace DirectX::SimpleMath;


/****************************************************************
 *  Transform 構造体 (メモリアライメント 256 Byte)
 ****************************************************************/
struct alignas(256) Transform {

	DirectX::XMMATRIX World;       /* ワールド行列 */
	DirectX::XMMATRIX View;        /* ビュー行列 */
	DirectX::XMMATRIX Projection;  /* 射影行列 */
};


/****************************************************************
 * Light 構造体
 ****************************************************************/
struct Light {

	// Vector4にしているのは packoffsetで扱いやすくするため（16Byteだから）
	Vector4 LightPosition;  /* ライトの座標 */
	Color   LightColor;     /* ライトの色 */
};


/****************************************************************
 * ConstantBuffer クラス
 ****************************************************************/
class ConstantBuffer {

private:

	ComPtr<ID3D12Resource>           m_pCB;        /* 定数バッファ */
	D3D12_CPU_DESCRIPTOR_HANDLE      m_HandleCPU;  /* CPUディスクリプタハンドル */
	D3D12_GPU_DESCRIPTOR_HANDLE      m_HandleGPU;  /* GPUディスクリプタハンドル */
	D3D12_CONSTANT_BUFFER_VIEW_DESC  m_Desc;       /* CBVの設定 */
	void*                            m_pMapBuf;    /* マッピングされたバッファへのポインタ */

public:

	ConstantBuffer();

	~ConstantBuffer();


	/****************************************************************
	 * 初期化処理
	 ****************************************************************/
	bool Init(ID3D12Device* pDevice, ID3D12DescriptorHeap* pHeap, size_t size, size_t HeapCount);


	/****************************************************************
	 * 終了処理
	 ****************************************************************/
	void Term();


	/****************************************************************
	 * CPUハンドルの取得
	 ****************************************************************/
	D3D12_CPU_DESCRIPTOR_HANDLE GetHandleCPU() const;


	/****************************************************************
	 * GPUハンドルの取得
	 ***************************************************************/
	D3D12_GPU_DESCRIPTOR_HANDLE GetHandleGPU() const;


	/****************************************************************
	 * マッピングされたバッファのポインタを取得
	 ****************************************************************/
	void* GetMapBuf() {

		return m_pMapBuf;
	}


	/****************************************************************
	 * GPU仮想アドレスの取得
	 ****************************************************************/
	D3D12_GPU_VIRTUAL_ADDRESS GetVirtualAddress() const;

};


