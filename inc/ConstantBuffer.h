#pragma once

/****************************************************************
 * Include
 ****************************************************************/
#include <d3d12.h>
#include "ComPtr.h"


/****************************************************************
 * ConstantBuffer クラス
 ****************************************************************/
class ConstantBuffer {

private:

	ComPtr<ID3D12Resource>           m_pCB;        /* 定数バッファ */
	D3D12_CPU_DESCRIPTOR_HANDLE      m_HandleCPU;  /* CPUディスクリプタハンドル */
	D3D12_GPU_DESCRIPTOR_HANDLE      m_HandleGPU;  /* GPUディスクリプタハンドル */
	D3D12_CONSTANT_BUFFER_VIEW_DESC  m_Desc;       /* CBVの設定 */
	void*                            m_pMapBuf;    /* マッピングされたバッファへのポインタ */

public:

	ConstantBuffer();

	~ConstantBuffer();


	/****************************************************************
	 * 初期化処理
	 ****************************************************************/
	bool Init(ComPtr<ID3D12Device>* pDevice, ComPtr<ID3D12DescriptorHeap>* pHeap, size_t size);


	/****************************************************************
	 * 終了処理
	 ****************************************************************/
	void Term();


	/****************************************************************
	 * CPUハンドルの取得
	 ****************************************************************/
	D3D12_CPU_DESCRIPTOR_HANDLE GetHandleCPU() const;


	/****************************************************************
	 * GPUハンドルの取得
	 ***************************************************************/
	D3D12_GPU_DESCRIPTOR_HANDLE GetHandleGPU() const;


	/****************************************************************
	 * マッピングされたバッファのポインタを取得
	 ****************************************************************/
	void* GetMapBuf();


	/****************************************************************
	 * GPU仮想アドレスの取得
	 ****************************************************************/
	D3D12_GPU_VIRTUAL_ADDRESS GetVirtualAddress() const;

};


